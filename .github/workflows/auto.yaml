name: Auto
on:
  push:
    branches: ["main", "dev"]

jobs:
  build:
    name: Build solution and test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql/mysql-server
        env:
          MYSQL_DATABASE: App
          # MYSQL_HOST: 127.0.0.1
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          # MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 3306:3306
      rabbitmq:
        image: rabbitmq
        ports:
          - 5672:5672
    steps:
      - name: Pull code
        uses: actions/checkout@v2
      - name: Setup .Net
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"
      - name: Restore dependencies
        run: dotnet restore
      - name: Build solution
        run: dotnet build /nowarn:CS8618 --no-restore
      - name: Test
        run: dotnet test --no-build

  docker:
    name: build docker image and push image to docker hub
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Pull code
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/net6demo:latest

  # ssh:
  #   name: Deploy
  #   needs: build-and-push-image
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: ssh testing
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.HKU_HOST }}
  #       username: ubuntu
  #       key: ${{ secrets.HKU_KEY }}
  #       port: 22
  #       script: | 
  #         docker-compose down
  #         echo --------------------------------------------------
  #         docker-compose pull
  #         echo --------------------------------------------------
  #         docker-compose up -d
  #         echo --------------------------------------------------
  #         docker image prune -f
